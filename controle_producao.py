# üéØ Capacidades T√©cnicas:
# ‚Ä¢ Propor solu√ß√µes efetivas para problemas computacionais.
# ‚Ä¢ Elaborar programas computacionais para resolu√ß√£o de problemas reais.
# ‚Ä¢ Compreender procedimentos e algoritmos em sistemas computacionais.
# ‚Ä¢ Utilizar dados estruturados em algoritmos e programas.
# ‚Ä¢ Aplicar estruturas de controle e modulariza√ß√£o.
# 
# ü§ù Capacidades Socioemocionais:
# ‚Ä¢ Demonstrar postura proativa e adaptabilidade.
# ‚Ä¢ Dialogar com empatia e escuta ativa em ambientes profissionais.
# 
# üìö Conhecimentos:
# 
# Programa√ß√£o
# ‚ÄÉ1.1. Padr√µes da linguagem
# ‚ÄÉ1.2. Ambientes de desenvolvimento
# ‚ÄÉ1.3. Estrutura de dados
# ‚ÄÉ1.4. Estruturas de decis√£o
# ‚ÄÉ1.5. Estruturas de repeti√ß√£o
# 
# Aplica√ß√µes em Intelig√™ncia Artificial
# ‚ÄÉ2.1. Vis√£o geral
# ‚ÄÉ2.2. Aplica√ß√µes
# 
# üéÅ Conte√∫do:
# Listas: cria√ß√£o, acesso, manipula√ß√£o
# Tuplas: cria√ß√£o, acesso
# Dicion√°rios: cria√ß√£o, acesso, manipula√ß√£o
# Aplica√ß√µes de listas, tuplas e dicion√°rios em manufatura
# 
# üìå Import√¢ncia para o case:
# A manipula√ß√£o de estruturas compostas permite representar dados industriais como registros de produ√ß√£o e par√¢metros operacionais. O dom√≠nio dessas estruturas √© essencial para a an√°lise e automa√ß√£o de processos.
# 
# üìù Atividade:
# üíº Situa√ß√£o-Problema: Sistema de Controle de Produ√ß√£o
# A equipe de desenvolvimento de sistemas de uma f√°brica que adota foi encarregada de criar um que permita registrar e analisar dados de pe√ßas produzidas durante um turno.
# 
# O sistema deve:
# 
# 1) Registrar os nomes das pe√ßas produzidas em uma lista.
# 2) Armazenar os limites de peso aceit√°veis em uma tupla (m√≠nimo e m√°ximo).
# 3) Guardar em um dicion√°rio o nome da pe√ßa como chave e uma lista com os pesos medidos como valor.
# 4) Solicitar tamb√©m o material de cada pe√ßa produzida e armazenar os materiais √∫nicos em um conjunto, ou seja, todos os tipos diferentes de materiais utilizados no turno, sem repeti√ß√µes.
# 5) Utilizar fun√ß√µes para:
# Coletar dados das pe√ßas (nome, peso, material).
# Classificar a pe√ßa como aprovada ou reprovada com base nos limites de peso da tupla.
# Exibir um relat√≥rio final com: quantidade de pe√ßas, lista completa de pe√ßas, quantidade de pe√ßas aprovadas e reprovadas e materiais √∫nicos registrados.
# Sistema de Controle de Produ√ß√£o
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Fun√ß√£o para coletar os dados das pe√ßas produzidas.
# 1) Registrar os nomes das pe√ßas produzidas em uma lista.
# 2) Armazenar os limites de peso aceit√°veis em uma tupla (m√≠nimo e m√°ximo).
# 3) Guardar em um dicion√°rio o nome da pe√ßa como chave e uma lista com os pesos medidos como valor.
# 4) Solicitar tamb√©m o material de cada pe√ßa produzida e armazenar os materiais √∫nicos em um conjunto.
def coletar_dados():
    """Coleta os dados das pe√ßas produzidas."""
    pecas = []
    limites_peso = (float(input("Digite o peso m√≠nimo aceit√°vel: ")), float(input("Digite o peso m√°ximo aceit√°vel: ")))
    dicionario_pesos = {}
    materiais_unicos = set()

    while True:
        nome = input("Digite o nome da pe√ßa (ou 'sair' para finalizar): ")
        if nome.lower() == 'sair':
            break
        pecas.append(nome)

        pesos = list(map(float, input(f"Digite os pesos medidos para a pe√ßa {nome}, separados por espa√ßo: ").split()))
        dicionario_pesos[nome] = pesos

        material = input(f"Digite o material da pe√ßa {nome}: ")
        materiais_unicos.add(material)

    return pecas, limites_peso, dicionario_pesos, materiais_unicos

# Fun√ß√£o para classificar as pe√ßas como aprovadas ou reprovadas.
# 5) Classificar a pe√ßa como aprovada ou reprovada com base nos limites de peso da tupla.
def classificar_pecas(dicionario_pesos, limites_peso):
    """Classifica as pe√ßas como aprovadas ou reprovadas com base nos limites de peso."""
    aprovadas = 0
    reprovadas = 0

    for nome, pesos in dicionario_pesos.items():
        for peso in pesos:
            if limites_peso[0] <= peso <= limites_peso[1]:
                aprovadas += 1
            else:
                reprovadas += 1

    return aprovadas, reprovadas

# Fun√ß√£o para exibir o relat√≥rio final.
# 5) Exibir um relat√≥rio final com:
#    - Quantidade de pe√ßas.
#    - Lista completa de pe√ßas.
#    - Quantidade de pe√ßas aprovadas e reprovadas.
#    - Materiais √∫nicos registrados.
def exibir_relatorio(pecas, aprovadas, reprovadas, materiais_unicos):
    """Exibe o relat√≥rio final."""
    print("\n--- Relat√≥rio Final ---")
    print(f"Quantidade total de pe√ßas: {len(pecas)}")
    print(f"Lista completa de pe√ßas: {', '.join(pecas)}")
    print(f"Quantidade de pe√ßas aprovadas: {aprovadas}")
    print(f"Quantidade de pe√ßas reprovadas: {reprovadas}")
    print(f"Materiais √∫nicos registrados: {', '.join(materiais_unicos)}")

# Fun√ß√£o principal que integra todas as funcionalidades do sistema.
def main():
    """Fun√ß√£o principal do sistema."""
    pecas, limites_peso, dicionario_pesos, materiais_unicos = coletar_dados()
    aprovadas, reprovadas = classificar_pecas(dicionario_pesos, limites_peso)
    exibir_relatorio(pecas, aprovadas, reprovadas, materiais_unicos)

if __name__ == "__main__":
    main()
